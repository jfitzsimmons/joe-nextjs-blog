{
  "chapters": [
    {
      "type": "newChapter",
      "section": {
        "chapterTitle": "Act 1",
        "body": "<p>I had an interview with a small \"studio\" that specialized in Wordpress builds.  I had make many Wordpress sites a while ago but it had been a decade or so since I had.  I hadn't made one since headless was an option and that had been on my bucket list to do. So I did some research.  I was going to do a JAMStack version headless Wordpress site.  I found an article from one of my favorite sites.</p>\n\n<a href=\"https://www.smashingmagazine.com/2020/02/headless-wordpress-site-jamstack/\">Smashing Magazine: How To Create A Headless WordPress Site On The JAMstack</a>\n\n<p>I used Vue With Nuxt for the front-end.  I was looking to learn more Vue.  I ostly use React, and have only dabbled with Vue a few times.  The Vue LifeCycle has always confused me in the past.</p>\n\n<p>Design wise, I was inspired by Mosaic Magazine.</p>\n\n<a href=\"https://mosaicscience.com/\">Mosaic</a>\n\n<p> <img src=\"/images/mosaic-home.jpg\" alt=\"Screenshot of Mosaic Magazine&#39;s Homepage\" title=\"Screenshot of Mosaic Magazine&#39;s Homepage\"> </p>\n\n<p>I liked the pixelated and overlapping borders.  No two patterns seem the same.  I wanted to create a non-repeating pattern like that with just css.  It was a cool aesthetic that I wanted to steal. I made a number of plaid repeating linear gradients and applied them as background images to html elements.  I tried this with four different color pallettes as a proof of concept.  </p>\n\n<p class=\"codepen\" data-height=\"500\" data-default-tab=\"result\" data-slug-hash=\"YzWMWzV\" data-preview=\"true\" data-user=\"jfitzsimmons\" style=\"height: 300px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;\">\n  <span>See the Pen <a href=\"https://codepen.io/jfitzsimmons/pen/YzWMWzV\">\n  repeating linear gradient designs</a> by jfitzsimmons (<a href=\"https://codepen.io/jfitzsimmons\">@jfitzsimmons</a>)\n  on <a href=\"https://codepen.io\">CodePen</a>.</span>\n</p>\n<script async src=\"https://cpwebassets.codepen.io/assets/embed/ei.js\"></script>\n\n<p>\nSo now I need to use the WordPress API.  I could do self hosted and run everything locally, but I want it to be online and free.  So I created a wordpress.com site and had to use the v1 api which is more limited than a self hosted v2 solution. That's one way I deviated from the Smashing tutorial.  In my implementation, I needed a featured image, categories, and attachments.  A lot of this is forced from having to use v1 API.  (I should put in some more work to remember exactly why) I populated the state of posts with this additional detail, and also fetched teh WordPress categories</p>\n\n<a href=\"https://developer.wordpress.com/docs/api/\">WordPress.com REST API</a>\n\n<p>\n\n<pre><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">async</span> getPosts({ state, commit, dispatch }, payload) {\n\n    <span class=\"hljs-comment\">// if (state.posts.length) return</span>\n    <span class=\"hljs-keyword\">const</span> page = payload ? payload.page : <span class=\"hljs-number\">1</span>;\n    <span class=\"hljs-keyword\">const</span> category = payload ? <span class=\"hljs-string\">`&amp;category=<span class=\"hljs-subst\">${payload.category}</span>`</span> : <span class=\"hljs-string\">''</span>;\n\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">let</span> posts = <span class=\"hljs-keyword\">await</span> fetch(\n        <span class=\"hljs-string\">`<span class=\"hljs-subst\">${siteURL}</span>/posts?number=20&amp;pretty=true&amp;page=<span class=\"hljs-subst\">${page}</span><span class=\"hljs-subst\">${category}</span>`</span>\n      ).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n\n      posts = posts.posts\n        .filter(<span class=\"hljs-function\"><span class=\"hljs-params\">el</span> =&gt;</span> el.status === <span class=\"hljs-string\">\"publish\"</span>)\n        .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ ID, slug, title, excerpt, date, tags, content, featured_image, attachments, categories }</span>) =&gt;</span> ({\n          ID,\n          slug,\n          title,\n          excerpt,\n          date,\n          tags,\n          content,\n          featured_image,\n          attachments,\n          categories\n        }))\n\n      commit(<span class=\"hljs-string\">\"updatePosts\"</span>, posts)\n    } <span class=\"hljs-keyword\">catch</span> (err) {\n      <span class=\"hljs-built_in\">console</span>.log(err)\n    }\n  }\n</code></pre>\n\n</p>\n<p>Populationg the state with WordPress categories</p>\n<p>\n<pre><code class=\"lang-javascript\">  <span class=\"hljs-keyword\">async</span> getCategories({ state, commit }) {\n    <span class=\"hljs-keyword\">if</span> (state.categories.length) <span class=\"hljs-keyword\">return</span>\n    <span class=\"hljs-keyword\">try</span> {\n      <span class=\"hljs-keyword\">let</span> categories = <span class=\"hljs-keyword\">await</span> fetch(\n        <span class=\"hljs-string\">`<span class=\"hljs-subst\">${siteURL}</span>/categories?number=20&amp;pretty=true`</span>\n      ).then(<span class=\"hljs-function\"><span class=\"hljs-params\">res</span> =&gt;</span> res.json())\n\n  categories = categories.categories\n    .filter(<span class=\"hljs-function\"><span class=\"hljs-params\">el</span> =&gt;</span> el.post_count &gt; <span class=\"hljs-number\">0</span>)\n    .map(<span class=\"hljs-function\">(<span class=\"hljs-params\">{ id, name, slug, description }</span>) =&gt;</span> ({\n      id,\n      name,\n      slug,\n      description\n    }))\n\n  commit(<span class=\"hljs-string\">\"updateCategories\"</span>, categories)\n} <span class=\"hljs-keyword\">catch</span> (err) {\n  <span class=\"hljs-built_in\">console</span>.log(err)\n}\n\n  }\n</code></pre>\n\n</p>\n<p>\nThen I looped through the categories in state to create navigation links in the Nave Template.\n</p>\n\n<pre><code class=\"lang-javascript\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">template</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"nav\"</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"plaid nav__home\"</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NuxtLink</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/\"</span>&gt;</span> <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">app-icon</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">app-icon</span>&gt;</span>Blog<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">NuxtLink</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">ul</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"plaid nav__link\"</span>&gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NuxtLink</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"plaid__link\"</span> <span class=\"hljs-attr\">to</span>=<span class=\"hljs-string\">\"/about\"</span>&gt;</span>About<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">NuxtLink</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">li</span>\n        <span class=\"hljs-attr\">v-for</span>=<span class=\"hljs-string\">\"category in categories\"</span>\n        <span class=\"hljs-attr\">:key</span>=<span class=\"hljs-string\">\"category.id\"</span>\n        <span class=\"hljs-attr\">:class</span>=<span class=\"hljs-string\">\"`plaid nav__link ${[\n          category.id === selectedTag ? activeClass : '',\n        ]}`\"</span>\n      &gt;</span>\n        <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">NuxtLink</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"plaid__link\"</span> <span class=\"hljs-attr\">:to</span>=<span class=\"hljs-string\">\"`/category/${category.slug}`\"</span>&gt;</span></span><span class=\"hljs-template-variable\">{{\n          category.name\n        }}</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">NuxtLink</span>&gt;</span>\n      <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">li</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">ul</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">template</span>&gt;</span>\n\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n<span class=\"hljs-keyword\">import</span> AppIcon <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">\"@/components/AppIcon.vue\"</span>;\n\n<span class=\"hljs-keyword\">export</span> <span class=\"hljs-keyword\">default</span> {\n  <span class=\"hljs-attr\">components</span>: {\n    AppIcon,\n  },\n  data() {\n    <span class=\"hljs-keyword\">return</span> {\n      <span class=\"hljs-attr\">selectedTag</span>: <span class=\"hljs-literal\">null</span>,\n      <span class=\"hljs-attr\">activeClass</span>: <span class=\"hljs-string\">\"active\"</span>,\n    };\n  },\n  <span class=\"hljs-attr\">computed</span>: {\n    categories() {\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.$store.state.categories;\n    },\n  },\n};\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></span>\n</code></pre>\n\n<p>\nI then tried to mimic as much of the style as I could and populated the site with Creative Commons license articles from numerous sites and this is what I got.</p>\n\n<p><img src=\"/images/joe-nuxt-wordpress-home.jpg\" alt=\"My Headless Nuxt WordPress Blog Homepage\" title=\"My Headless Nuxt WordPress Blog Homepage\"></p>\n\nIt's not perfect and has a long way to go, but not bad for only a day or two of work.\n\n<a href=\"https://angry-hamilton-e051de.netlify.app/\">My Headless Nuxt WordPress Blog</a>",
        "thumbnail": "/images/mosaic-home.jpg",
        "category": "code",
        "tags": [
          "style"
        ],
        "summary": "It's not perfect and has a long way to go, but not bad for only a day or two of work."
      }
    }
  ],
  "author": "fitzsimmons",
  "slug": "2021-07-08_headless-wordpress-plus-a-mindless-developer ",
  "references": [
    {
      "index": 0,
      "date": "2020-02-26T06:00:00.000Z",
      "title": "How To Create A Headless WordPress Site On The JAMstack",
      "url": "https://www.smashingmagazine.com/2020/02/headless-wordpress-site-jamstack/",
      "source": "Smashing Magazine"
    },
    {
      "index": 1,
      "date": "2021-08-26T16:48:15.825Z",
      "title": "WordPress.com REST API",
      "url": "https://developer.wordpress.com/docs/api/",
      "source": "WordPress"
    }
  ],
  "date": "2021-07-08",
  "title": "Headless WordPress plus a mindless developer equals a failed job interview",
  "tags": [
    "inspiration",
    "style"
  ],
  "description": "I try a WordPress Site On The JAMstack with Nuxt",
  "category": "code"
}